void testFindExistingEventOnDate_EventAtTheDate()
{
	Database db;
	std::stringstream ss;
	CommandParser commandParser(ss);
	ss.str("Add 0-1-2 event1\nAdd 1-2-3 event2\nFind 0-1-2\n");

	const AddEventCommand addCommand1 = commandParser.GetAddCommand();
	db.AddEvent(addCommand1.date,addCommand1.event);
	
	const AddEventCommand addCommand2 = commandParser.GetAddCommand();
	db.AddEvent(addCommand2.date,addCommand2.event);
	
	const FindCommand findCommand = commandParser.GetFindCommand(); 
	const event_t strFoundEvent {db.Find(findCommand.date)};
	
	assert("event1" == strFoundEvent);
	
	auto command = commandParser.GetCommand();
	const event_t strFoundEvent = command.Execute(db);

}


class CommandParser
{
public:
	explicit CommandParser(std::istream&);

	AddEventCommand GetAddCommand() const;
	FindCommand GetFindCommand() const;
};

CommandParser::CommandParser(std::istream& is)
{
}

AddEventCommand CommandParser::GetAddCommand() const
{
	AddEventCommand addEvent;
	return addEvent;
}

FindCommand CommandParser::GetFindCommand() const
{
	FindCommand findCommand;
	return findCommand;
}


struct FindCommand
{
	Date date;
};

struct AddEventCommand
{
	Date date;
	event_t event;
};

class ICommand
{
public:
	virtual std::string Execute(Database&) const;
	virtual ~ICommand();
};

using ICommandUPtr = std::unique_ptr<ICommand>;


class CommandParser
{
public:
	explicit CommandParser(std::istream&);
	ICommandUPtr GetCommand() const;
};

CommandParser::CommandParser(std::istream& is)
{
}

ICommandUPtr CommandParser::GetCommand() const 
{
	return {};
}



void testFindExistingEventOnDate_EventAtTheDate()
{
	Database db;
	std::stringstream ss;
	CommandParser commandParser(ss);
	ss.str("Add 0-1-2 event1\nAdd 1-2-3 event2\nFind 0-1-2\n");

	for(size_t i = 0; i < 3; ++i)
	{
		auto command = commandParser.GetCommand();
		const event_t strFoundEvent = command->Execute(db);
		command->GetResult
	}
	
	assert("event1" == strFoundEvent);
	
}



